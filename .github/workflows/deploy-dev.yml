name: Deploy DEV

env: 
  STAGE: dev
  CONTAINER_NAME: smmp-api
  DOCKER_IMAGE: rogrp6/smmp-api
  DOCKER_IMAGE_TAG: dev
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  SERVER_HOST: ec2-3-216-199-173.compute-1.amazonaws.com
  SERVER_USER: ${{ secrets.DEV_SSH_USER }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  PINATA_API_KEY: ${{ secrets.DEV_PINATA_API_KEY }}
  PINATA_SECRET_API_KEY: ${{ secrets.DEV_PINATA_SECRET_API_KEY }}
  DOCKER_NET: local_net
  REDIS_NAME: redis_db
  REDIS_PORT: 6379
  REDIS_TTL: 240000000
  APP_EXT_PORT: 80
  APP_PORT: 3003
  PROMETHEUS_NAME: smmp-prometheus
  PROMETHEUS_PORT: 9090 
  GRAFANA_NAME: smmp-grafana
  GRAFANA_PORT: 3000
  GRAFANA_PASSWORD: ${{ secrets.GRAFANA_PASSWORD }}
  FORCE_RE_UP_MONITOR: 1
  MONITOR_HOST: ec2-54-160-242-129.compute-1.amazonaws.com

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    
    - uses: actions/checkout@v3
    
    - name: Build the Docker image
      run: docker build . -t $DOCKER_IMAGE:$DOCKER_IMAGE_TAG
      
    - name: Docker Login
      uses: docker/login-action@v2.1.0
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_PASSWORD }}
        
    - name: Push the Docker image
      run: docker push $DOCKER_IMAGE:$DOCKER_IMAGE_TAG
      
    - name: Server pull and run Docker image 
      uses: appleboy/ssh-action@master
      with:
        key : ${{ env.SSH_PRIVATE_KEY }}
        host: ${{ env.SERVER_HOST }}
        username: ${{ env.SERVER_USER }}
        script: |
          sudo docker network create ${{ env.DOCKER_NET }} ; \
          sudo docker stop ${{ env.REDIS_NAME }} ; \
          sudo docker run --network ${{ env.DOCKER_NET }} -d -p ${{ env.REDIS_PORT }}:${{ env.REDIS_PORT }} --rm --name ${{ env.REDIS_NAME }} redis:latest ; \
          sudo docker stop ${{ env.CONTAINER_NAME }} ; \
          sudo docker run --network ${{ env.DOCKER_NET }} --pull always --rm --name ${{ env.CONTAINER_NAME }} -d -p ${{ env.APP_EXT_PORT }}:${{ env.APP_PORT }} \
          -e PORT=${{ env.APP_PORT }} \
          -e HOST=0.0.0.0 \
          -e STAGE=${{ env.STAGE }} \
          -e PINATA_API_KEY=${{ env.PINATA_API_KEY }} \
          -e PINATA_SECRET_API_KEY=${{ env.PINATA_SECRET_API_KEY }} \
          -e REDIS_HOST=${{ env.REDIS_NAME }} \
          -e REDIS_PORT=${{ env.REDIS_PORT }} \
          -e REDIS_TTL=${{ env.REDIS_TTL }} \
          ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_IMAGE_TAG }}

    - name: Up Prometheus & Grafana
      uses: appleboy/ssh-action@master
      with:
        key : ${{ env.SSH_PRIVATE_KEY }}
        host: ${{ env.MONITOR_HOST }}
        username: ${{ env.SERVER_USER }}
        # Run only if graphana or prometheous are not already up
        script: |
          ( \
          sudo docker container inspect ${{ env.PROMETHEUS_NAME }} && \
          sudo docker container inspect ${{ env.GRAFANA_NAME }} && \
          ((${{ env.FORCE_RE_UP_MONITOR }} > 0)) \
          ) || \
          sudo docker network create ${{ env.DOCKER_NET }} ; \
          sudo docker stop ${{ env.PROMETHEUS_NAME }}; \
          sudo docker stop ${{ env.GRAFANA_NAME }}; \
          docker container prune -f; \
          mkdir prometheus-data ; \
          docker run --pull always --rm --entrypoint cat $DOCKER_IMAGE:$DOCKER_IMAGE_TAG ci/templates/prometheus.yml > prometheus-data/prometheus-template.yml; \
          docker run --pull always --rm --entrypoint cat $DOCKER_IMAGE:$DOCKER_IMAGE_TAG ci/templates/alert.rules > prometheus-data/alert.rules; \
          export APP_HOST=SERVER_HOST; \
          export APP_PORT=80; \
          envsubst < prometheus-data/prometheus-template.yml  > prometheus-data/prometheus.yml; \
          sudo docker run --network ${{ env.DOCKER_NET }} --name ${{ env.PROMETHEUS_NAME }} --rm -d \
            -p ${{ env.PROMETHEUS_PORT }}:${{ env.PROMETHEUS_PORT }} \
            -v "$(pwd)/prometheus-data":/etc/prometheus \
            prom/prometheus; \
          sudo docker run --network ${{ env.DOCKER_NET }} --name ${{ env.GRAFANA_NAME }} --rm -d \
            -p ${{ env.GRAFANA_PORT }}:${{ env.GRAFANA_PORT }} \
            grafana/grafana;

    # - name: Config Grafana
    #   uses: wei/curl@v1
    #   with:
    #     args: -u "admin:admin" ${{ env.SERVER_HOST }}:3000/api/user
      # run: curl ${{ env.SERVER_HOST }}:3000/api/user -u "admin:admin"
      # run: curl ec2-3-216-199-173.compute-1.amazonaws.com:3000/api/user -u "admin:admin"
  # curl ${{ env.SERVER_HOST }}:${{ env.GRAFANA_PORT }}/api/user/password -u "admin:admin" \
  #     -X "PUT" \
  #     -H "content-type: application/json" \
  #     -H "accept: application/json, text/plain, */*" \
  #     --data-raw "{"oldPassword":"admin","newPassword":"${{ env.GRAFANA_PASSWORD }}","confirmNew":"${{ env.GRAFANA_PASSWORD }}"}" \
  #     --compressed; \
  # curl ${{ env.SERVER_HOST }}:${{ env.GRAFANA_PORT }}/api/datasources -u "admin:${{ env.GRAFANA_PASSWORD }}" \
  #   -H "Content-Type: application/json;charset=UTF-8" \
  #   -H "accept: application/json, text/plain, */*" \
  #   --data-raw "{"name":"DS_PROMETHEUS","type":"prometheus","url":"http://${{ env.PROMETHEUS_NAME }}:${{ env.PROMETHEUS_PORT }}","access":"proxy","jsonData":{"keepCookies":[]},"secureJsonFields":{}}" \
  #   --compressed
